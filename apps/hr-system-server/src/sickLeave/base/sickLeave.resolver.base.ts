/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SickLeave } from "./SickLeave";
import { SickLeaveCountArgs } from "./SickLeaveCountArgs";
import { SickLeaveFindManyArgs } from "./SickLeaveFindManyArgs";
import { SickLeaveFindUniqueArgs } from "./SickLeaveFindUniqueArgs";
import { CreateSickLeaveArgs } from "./CreateSickLeaveArgs";
import { UpdateSickLeaveArgs } from "./UpdateSickLeaveArgs";
import { DeleteSickLeaveArgs } from "./DeleteSickLeaveArgs";
import { Employee } from "../../employee/base/Employee";
import { SickLeaveService } from "../sickLeave.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SickLeave)
export class SickLeaveResolverBase {
  constructor(
    protected readonly service: SickLeaveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "read",
    possession: "any",
  })
  async _sickLeavesMeta(
    @graphql.Args() args: SickLeaveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SickLeave])
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "read",
    possession: "any",
  })
  async sickLeaves(
    @graphql.Args() args: SickLeaveFindManyArgs
  ): Promise<SickLeave[]> {
    return this.service.sickLeaves(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SickLeave, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "read",
    possession: "own",
  })
  async sickLeave(
    @graphql.Args() args: SickLeaveFindUniqueArgs
  ): Promise<SickLeave | null> {
    const result = await this.service.sickLeave(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SickLeave)
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "create",
    possession: "any",
  })
  async createSickLeave(
    @graphql.Args() args: CreateSickLeaveArgs
  ): Promise<SickLeave> {
    return await this.service.createSickLeave({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SickLeave)
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "update",
    possession: "any",
  })
  async updateSickLeave(
    @graphql.Args() args: UpdateSickLeaveArgs
  ): Promise<SickLeave | null> {
    try {
      return await this.service.updateSickLeave({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SickLeave)
  @nestAccessControl.UseRoles({
    resource: "SickLeave",
    action: "delete",
    possession: "any",
  })
  async deleteSickLeave(
    @graphql.Args() args: DeleteSickLeaveArgs
  ): Promise<SickLeave | null> {
    try {
      return await this.service.deleteSickLeave(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: SickLeave
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
