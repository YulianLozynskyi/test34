/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsDate, IsOptional, ValidateNested, IsString } from "class-validator";
import { Type } from "class-transformer";
import { DayOff } from "../../dayOff/base/DayOff";
import { Meeting } from "../../meeting/base/Meeting";
import { SickLeave } from "../../sickLeave/base/SickLeave";

@ObjectType()
class Employee {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateJoined!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [DayOff],
  })
  @ValidateNested()
  @Type(() => DayOff)
  @IsOptional()
  dayOffs?: Array<DayOff>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Meeting],
  })
  @ValidateNested()
  @Type(() => Meeting)
  @IsOptional()
  meetings?: Array<Meeting>;

  @ApiProperty({
    required: false,
    type: () => [SickLeave],
  })
  @ValidateNested()
  @Type(() => SickLeave)
  @IsOptional()
  sickLeaves?: Array<SickLeave>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Employee as Employee };
