/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DayOff } from "./DayOff";
import { DayOffCountArgs } from "./DayOffCountArgs";
import { DayOffFindManyArgs } from "./DayOffFindManyArgs";
import { DayOffFindUniqueArgs } from "./DayOffFindUniqueArgs";
import { CreateDayOffArgs } from "./CreateDayOffArgs";
import { UpdateDayOffArgs } from "./UpdateDayOffArgs";
import { DeleteDayOffArgs } from "./DeleteDayOffArgs";
import { Employee } from "../../employee/base/Employee";
import { DayOffService } from "../dayOff.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DayOff)
export class DayOffResolverBase {
  constructor(
    protected readonly service: DayOffService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "read",
    possession: "any",
  })
  async _dayOffsMeta(
    @graphql.Args() args: DayOffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DayOff])
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "read",
    possession: "any",
  })
  async dayOffs(@graphql.Args() args: DayOffFindManyArgs): Promise<DayOff[]> {
    return this.service.dayOffs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DayOff, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "read",
    possession: "own",
  })
  async dayOff(
    @graphql.Args() args: DayOffFindUniqueArgs
  ): Promise<DayOff | null> {
    const result = await this.service.dayOff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DayOff)
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "create",
    possession: "any",
  })
  async createDayOff(@graphql.Args() args: CreateDayOffArgs): Promise<DayOff> {
    return await this.service.createDayOff({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DayOff)
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "update",
    possession: "any",
  })
  async updateDayOff(
    @graphql.Args() args: UpdateDayOffArgs
  ): Promise<DayOff | null> {
    try {
      return await this.service.updateDayOff({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DayOff)
  @nestAccessControl.UseRoles({
    resource: "DayOff",
    action: "delete",
    possession: "any",
  })
  async deleteDayOff(
    @graphql.Args() args: DeleteDayOffArgs
  ): Promise<DayOff | null> {
    try {
      return await this.service.deleteDayOff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: DayOff
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
