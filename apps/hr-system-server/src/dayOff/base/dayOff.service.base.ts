/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DayOff as PrismaDayOff,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class DayOffServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DayOffCountArgs, "select">): Promise<number> {
    return this.prisma.dayOff.count(args);
  }

  async dayOffs<T extends Prisma.DayOffFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DayOffFindManyArgs>
  ): Promise<PrismaDayOff[]> {
    return this.prisma.dayOff.findMany<Prisma.DayOffFindManyArgs>(args);
  }
  async dayOff<T extends Prisma.DayOffFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DayOffFindUniqueArgs>
  ): Promise<PrismaDayOff | null> {
    return this.prisma.dayOff.findUnique(args);
  }
  async createDayOff<T extends Prisma.DayOffCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DayOffCreateArgs>
  ): Promise<PrismaDayOff> {
    return this.prisma.dayOff.create<T>(args);
  }
  async updateDayOff<T extends Prisma.DayOffUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DayOffUpdateArgs>
  ): Promise<PrismaDayOff> {
    return this.prisma.dayOff.update<T>(args);
  }
  async deleteDayOff<T extends Prisma.DayOffDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DayOffDeleteArgs>
  ): Promise<PrismaDayOff> {
    return this.prisma.dayOff.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.dayOff
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
